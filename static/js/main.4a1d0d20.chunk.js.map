{"version":3,"sources":["Button/Button.js","TextRow/Text/Text.js","TextRow/TextRow.js","Modal/Modal.js","App.js","index.js"],"names":["Button","onClick","props","changeMode","myMode","className","this","mode","text","React","Component","Text","count","myCount","style","width","TextRow","words","map","word","i","offset","Math","floor","maxLength","toString","Modal","textArea","createRef","handleCloseModal","bind","val","current","value","changeText","isOpen","appElement","document","getElementById","rows","cols","defaultValue","prevTextAreaVal","ref","autocomplete","autocorrect","autofocus","prevMode","App","state","sentences","totalCount","buttons","clearInterval","timerID","setState","interval","setInterval","tick","str","lines","replace","split","filter","line","forEach","push","length","max","alert","console","log","info","sentence","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a1d0d20.chunk.js","sourcesContent":["import './Button.css';\nimport React from 'react';\n\nclass Button extends React.Component {\n    render() {\n        return (\n            <button \n                onClick={() => this.props.changeMode(this.props.myMode)} \n                className={this.props.myMode === this.props.mode ? \"btn sel\" : \"btn\"}\n            >\n                {this.props.text}\n            </button>\n        )\n    }\n    \n}\n\nexport default Button;","import './Text.css';\nimport React from 'react';\n\nclass Text extends React.Component {\n    render() {\n        return (\n            <div \n                className={this.props.count === this.props.myCount ? \"text show\" : \"text\"}\n                style={{width: this.props.width}}\n            >\n                {this.props.text}\n            </div>\n        )\n    }\n}\n\nexport default Text;","import './TextRow.css';\nimport React from 'react';\nimport Text from './Text/Text';\n\nclass TextRow extends React.Component {\n    render() {\n        return (\n            <div className=\"textWrapper\">\n                {this.props.words.map((word, i) => \n                    <Text \n                        key={i} \n                        count={this.props.count} \n                        myCount={this.props.offset + i} \n                        text={word} \n                        width={(Math.floor(100/this.props.maxLength)).toString() + \"%\"}\n                    />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default TextRow;","import './Modal.css';\nimport React from 'react';\nimport ReactModal from 'react-modal';\n\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.textArea = React.createRef();\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n    }\n\n    handleCloseModal() {\n      const val = this.textArea.current.value;\n      this.props.changeText(val);\n    }\n\n    render() {\n        return (\n            <ReactModal\n            isOpen={this.props.isOpen}\n            appElement={document.getElementById('root')}\n            >\n                <div className='modalWrapper'>\n                    <h1>Papa enter your taal here ðŸ˜Š</h1>\n                    <textarea \n                        rows=\"6\" \n                        cols=\"50\" \n                        defaultValue={this.props.prevTextAreaVal} \n                        ref={this.textArea}\n                        autocomplete={\"off\"}\n                        autocorrect={\"off\"}\n                        autofocus\n                    />\n                    <div>\n                        <button className='ok' onClick={this.handleCloseModal}>Ok</button> \n                        <button className='cancel' onClick={() => this.props.changeMode(this.props.prevMode)}>Cancel</button> \n                    </div>\n                </div>\n            </ReactModal>\n        )\n    }\n}\n\nexport default Modal;","import './App.css';\nimport React from 'react';\nimport Button from './Button/Button';\nimport TextRow from './TextRow/TextRow';\nimport Modal from './Modal/Modal';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode:-1, \n      count:1,\n      sentences:[],\n      totalCount: 0,\n      maxLength:0\n    };\n    this.changeMode = this.changeMode.bind(this);\n    this.changeText = this.changeText.bind(this);\n    this.buttons = [\n      [\"1s\",1],\n      [\"0.5s\",2],\n      [\"0.25s\",4],\n      [\"Stop\",0],\n      [\"Edit\",-1]\n    ];\n    this.prevMode = 1;\n    this.prevTextAreaVal = \"Ta Dhin Dhin Da\";\n  }\n\n  componentDidMount() {\n    this.changeText(\"Ta Dhin Dhin Da\");\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  changeMode(mode) {\n    if (this.timerID) {\n      clearInterval(this.timerID);\n    }\n\n    this.prevMode = this.state.mode;\n    this.setState({\n      mode\n    })\n\n    if (mode > 0) {\n      const interval = 1000 / mode;\n\n      this.timerID = setInterval(\n        () => this.tick(),\n        interval\n      );\n    }\n  }\n\n  changeText(str) {\n    let lines = str.replace(/\\r\\n/g,\"\\n\").split('\\n').filter(line => line);\n    let sentences = [];\n    let totalCount = 0;\n    let maxLength = 0;\n\n    lines.forEach(line => {\n      const words = line.split(' ').filter(word => word);\n      sentences.push([totalCount, words]);\n      totalCount += words.length;\n      maxLength = Math.max(maxLength, words.length);\n    });\n\n    if (totalCount === 0) {\n      alert(\"Papa add some text :)\");\n      return;\n    }\n\n    this.prevTextAreaVal = str;\n\n    this.setState({\n      sentences,\n      totalCount,\n      maxLength,\n      count: 0\n    })\n\n    this.changeMode(this.prevMode);\n  }\n\n  tick() {\n    console.log(\"tick\");\n    this.setState({\n      count: (this.state.count + 1) % this.state.totalCount\n    });\n  }\n\n  render() {\n    return ( \n      <div className=\"App\">\n        <div>\n          {this.buttons.map((info, i) => \n            <Button key={i}  mode={this.state.mode} changeMode={this.changeMode} myMode={info[1]} text={info[0]}/>\n          )}\n        </div>\n        {this.state.sentences.map((sentence, i) => \n          <TextRow key={i} count={this.state.count} words={sentence[1]} offset={sentence[0]} maxLength={this.state.maxLength}/>\n        )}\n        <Modal \n          isOpen={this.state.mode === -1}\n          prevTextAreaVal = {this.prevTextAreaVal}\n          prevMode = {this.prevMode}\n          changeText = {this.changeText}\n          changeMode={this.changeMode}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}